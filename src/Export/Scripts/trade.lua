local dkjson = require "dkjson"

-- loading league
print("Downloading Stats info")

local function cleanAndFormatString(str)
	return str:gsub('"', '\\"'):gsub("\n", "\\n"):gsub("%%", "%%%%"):lower()
end
launch:DownloadPage(
	"https://www.pathofexile.com/api/trade/data/stats",
	function(response, errMsg)
		if errMsg then
			return "POE ERROR", "Error: "..errMsg
		else
			local json_data = dkjson.decode(response.body)
			if not json_data then
				return "Failed to Get PoE stats"
			end

			local out = io.open("../Data/TradeStatsParser.lua", "w")
			out:write('-- This file is automatically generated, do not edit!\n')
			out:write('-- Trade parser data (c) Grinding Gear Games\n\nreturn {\n')
			for _, stat in pairs(json_data.result) do
				out:write('\t["'..stat.id..'"] = {\n')
				for _, entry in pairs(stat.entries) do
					local entriesToParse = {}
					if entry.text:find("\n") then
						for line in entry.text:gmatch("([^\n]+)") do
							table.insert(entriesToParse, line)
						end
					else
						table.insert(entriesToParse, entry.text)
					end

					for _, entryToParse in ipairs(entriesToParse) do
						local entryText = cleanAndFormatString(entryToParse)
						-- We need to map exact string
						-- # -> (d+)
						-- option
						if entry.option and entry.option.options then
							if entryText:find("#") then
								for _, option in ipairs(entry.option.options) do
									local optionsToParse = {}
									if option.text:find("\n") then
										for line in option.text:gmatch("([^\n]+)") do
											table.insert(optionsToParse, line)
										end
									else
										table.insert(optionsToParse, option.text)
									end

									for _, optionsToParse in ipairs(optionsToParse) do
										local textFormat = entryText:gsub("#", function(k, val)
											return cleanAndFormatString(optionsToParse)
										end)
										out:write('\t\t["'..textFormat..'"]={tradeId="'..entry.id..'", option=' .. option.id .. ',values={'..option.id..'}},\n')
									end
								end
							else
								print("Option with text: "..entryText.." has no # in it")
							end
						elseif entryText:find("#") then
							local paramIndex = 0
							local strFunDefinition = 'function('
							local strFunBody = 'return {tradeId="'..entry.id..'",values={'

							-- we are mathinng 5, +5, -5, 0.5, -0.5, +0.5
							local textFormat = entryText:gsub("[+-]?#",function(k, val)
								strFunDefinition = strFunDefinition .. (paramIndex > 0 and ',' or '') .. 'num' .. paramIndex
								strFunBody = strFunBody .. (paramIndex > 0 and ',' or '') .. 'num'.. paramIndex
								paramIndex = paramIndex + 1
								return "([0-9.+-]+)"
							end)

							strFunDefinition = strFunDefinition .. ') '
							strFunBody = strFunBody .. '}} end'
							out:write('\t\t["'..textFormat..'"]='.. strFunDefinition..strFunBody..',\n')
						else				
							out:write('\t\t["'..entryText..'"]="'..entry.id..'",\n')
						end
					end
				end
				out:write('\t},\n')
			end
			out:write('}')
			out:close()

			print("Stats info downloaded")
		end
	end
)